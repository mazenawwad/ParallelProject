#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>

void generateRandomNumbers(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 1000000 + 1; // Numbers from 1 to 1,000,000
    }
}

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temp arrays
    int L[n1], R[n2];

    // Copy data to temp arrays L[] and R[]
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge the temp arrays back into arr[l..r]
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if there are any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if there are any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

void printArray(int A[], int size) {
    int i;
    for (i = 0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}

void measureRuntime(int arr[], int size, double *runtime) {
    clock_t start_time = clock();

    mergeSort(arr, 0, size - 1);

    clock_t end_time = clock();

    // Calculate the runtime in milliseconds
    *runtime = ((double)(end_time - start_time) * 1000) / CLOCKS_PER_SEC;
}

int main(int argc, char *argv[]) {
    MPI_Init(&argc, &argv);

    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);

    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);

    srand(time(NULL) + world_rank); // Seed the random number generator

    int arr_size = 100000;
    int *arr = NULL;

    if (world_rank == 0) {
        arr = (int *)malloc(arr_size * sizeof(int));
        generateRandomNumbers(arr, arr_size);
    }

    int segment_size = arr_size / world_size;
    int *local_arr = (int *)malloc(segment_size * sizeof(int));

    MPI_Scatter(arr, segment_size, MPI_INT, local_arr, segment_size, MPI_INT, 0, MPI_COMM_WORLD);

    double runtime;
    measureRuntime(local_arr, segment_size, &runtime);

    MPI_Gather(local_arr, segment_size, MPI_INT, arr, segment_size, MPI_INT, 0, MPI_COMM_WORLD);

    if (world_rank == 0) {
        // Final merge to combine the sorted segments
        for (int i = 1; i < world_size; i++) {
            int left = i * segment_size;
            int right = (i + 1) * segment_size - 1;
            int middle = left - 1;

            if (right >= arr_size) {
                right = arr_size - 1;
            }

            merge(arr, 0, middle, right);
        }

        printf("Runtime: %f milliseconds\n", runtime);

        free(arr);
    }

    free(local_arr);

    MPI_Finalize();
    return 0;
}